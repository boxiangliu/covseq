print(p)
}
mss = unique(prediction[split=="val" & label == 0, wsi])
for (w in mss){
plot_mss = prediction[wsi == w]
p=ggplot(plot_mss, aes(x=sm1)) + geom_histogram(aes(y=..count../sum(..count..))) + ggtitle("MSS")
print(p)
}
mss = unique(prediction[split=="val" & label == 0, wsi])
for (w in mss){
plot_mss = prediction[wsi == w]
p=ggplot(plot_mss, aes(x=sm1)) + geom_histogram(aes(y=..count../sum(..count..))) + ggtitle(w)
print(p)
}
wsi_pred
wsi_pred[split %in% c("val", "test")]
wsi_pred[split %in% c("val", "test"), wsi]
message(wsi_pred[split %in% c("val", "test"), wsi])
print(wsi_pred[split %in% c("val", "test"), wsi])
knitr::opts_knit$set(root.dir = normalizePath(".."))
library(data.table)
library(cowplot)
library(stringr)
library(pROC)
source("../utils.R")
prediction = fread("runs/patch/patch_crc10x_sub03/checkpoint/infer_logger.txt")
colnames(prediction) = c("split", "tile", "label", "pred", "raw0", "raw1", "sm0", "sm1", "nlsm0", "nlsm1", "loss")
prediction[, wsi := basename(dirname(tile))]
accuracy = prediction[, list(accuracy = mean(label == pred)), by="split"]
accuracy
message("Train")
table(prediction[split == "train", list(label, pred)])
message("Valid")
table(prediction[split == "val", list(label, pred)])
message("Test")
table(prediction[split == "test", list(label, pred)])
message("Train")
roc = roc(label ~ sm1, data = prediction, subset = (split == "train"))
plot(roc, print.auc = TRUE, main = "Train")
message("Train")
roc = roc(label ~ sm1, data = prediction, subset = (split == "val"))
plot(roc, print.auc = TRUE, main = "Valid")
message("Train")
roc = roc(label ~ sm1, data = prediction, subset = (split == "test"))
plot(roc, print.auc = TRUE, main="Test")
wsi_pred = prediction[, list(sm1=mean(sm1), label=unique(label)), by=c("wsi", "split")]
wsi_pred[, pred := sm1 > 0.5]
message("Train")
table(wsi_pred[split == "train", list(label, pred)])
message("Valid")
table(wsi_pred[split == "val", list(label, pred)])
message("Test")
table(wsi_pred[split == "test", list(label, pred)])
message("Train")
roc = roc(label ~ sm1, data = wsi_pred, subset = (split == "train"))
plot(roc, print.auc = TRUE, main = "Train")
message("Train")
roc = roc(label ~ sm1, data = wsi_pred, subset = (split == "val"))
plot(roc, print.auc = TRUE, main = "Valid")
message("Train")
roc = roc(label ~ sm1, data = wsi_pred, subset = (split == "test"))
plot(roc, print.auc = TRUE, main="Test")
ggplot(prediction, aes(x=sm1, fill=as.factor(label))) + geom_histogram(aes(y=..count../sum(..count..)),position="dodge") + facet_grid(split~., scale="free_y")
msi = unique(prediction[split=="val" & label == 1, wsi])
for (w in msi){
plot_msi = prediction[wsi == w]
p=ggplot(plot_msi, aes(x=sm1)) + geom_histogram(fill="red",aes(y=..count../sum(..count..)),position="dodge")+ggtitle(w)
print(p)
}
mss = unique(prediction[split=="val" & label == 0, wsi])
for (w in mss){
plot_mss = prediction[wsi == w]
p=ggplot(plot_mss, aes(x=sm1)) + geom_histogram(aes(y=..count../sum(..count..))) + ggtitle(w)
print(p)
}
print(wsi_pred[split %in% c("val", "test"), wsi])
```{r setup}
knitr::opts_knit$set(root.dir = normalizePath(".."))
library(data.table)
library(cowplot)
library(stringr)
library(pROC)
source("../utils.R")
prediction = fread("runs/patch/patch_crc20x_sub01/checkpoint/valid_logger.txt")
colnames(prediction) = c("iteration", "tile", "label", "pred", "raw0", "raw1", "sm0", "sm1", "nlsm0", "nlsm1", "loss")
prediction
prediction[iteration == 2000]
x = prediction[iteration == 2000]
table(x[, list(label, pred)])
last_iteration = max(prediction$iteration)
y = prediction[iteration == last_iteration]
table(y[, list(label, pred)])
x = prediction[iteration == 2000]
table(x[, list(label, pred)])
y = prediction[iteration == last_iteration]
table(y[, list(label, pred)])
z = prediction[iteration == 50000]
table(x[, list(label, pred)])
x = prediction[iteration == 2000]
table(x[, list(label, pred)])
z = prediction[iteration == 50000]
table(x[, list(label, pred)])
y = prediction[iteration == last_iteration]
table(y[, list(label, pred)])
x = prediction[iteration == 2000]
table(x[, list(label, pred)])
z = prediction[iteration == 50000]
table(z[, list(label, pred)])
y = prediction[iteration == last_iteration]
table(y[, list(label, pred)])
confusion = prediction[,list(tn = pred==0 & label==0, tp = pred==1&label==1, fn = pred==0&label==1, fp = pred==1&label==0), by="iteration"]
confusion
batch = 5120
confusion = prediction[,list(tn = sum(pred==0 & label==0)/batch, tp = sum(pred==1&label==1)/batch, fn = (pred==0&label==1)/batch, fp = sum(pred==1&label==0)/sum), by="iteration"]
confusion = prediction[,list(tn = sum(pred==0 & label==0)/batch, tp = sum(pred==1&label==1)/batch, fn = (pred==0&label==1)/batch, fp = sum(pred==1&label==0)/batch), by="iteration"]
confusion
confusion = prediction[,list(tn = sum(pred==0 & label==0)/batch, tp = sum(pred==1&label==1)/batch, fn = (pred==0&label==1)/batch, fp = sum(pred==1&label==0)/batch), by="iteration"]
confusion
prediction[, pred==0, by="iteration"]
prediction[, sum(pred==0), by="iteration"]
prediction[, sum(pred==0&label==0), by="iteration"]
prediction[, sum(pred==0&label==0)/batch, by="iteration"]
prediction[, list(sum(pred==0&label==0)/batch), by="iteration"]
prediction[, list(tn = sum(pred==0&label==0)/batch), by="iteration"]
prediction[, list(tn = sum(pred==0&label==0)/batch,  tp = sum(pred==1&label==1)/batch), by="iteration"]
prediction[, list(tn = sum(pred==0&label==0)/batch,  tp = sum(pred==1&label==1)/batch, fn = (pred==0&label==1)/batch), by="iteration"]
confusion = prediction[,list(tn = sum(pred==0 & label==0)/batch, tp = sum(pred==1&label==1)/batch, fn = sum(pred==0&label==1)/batch, fp = sum(pred==1&label==0)/batch), by="iteration"]
confusion
melt(confusion, id.vars = iteration)
melt(confusion, id.vars = "iteration")
confusion_long = melt(confusion, id.vars = "iteration")
ggplot(confusion_long, aes(x = iteration, y = value, color = variable)) + geom_line()
ggplot(confusion_long[iteration < 50000], aes(x = iteration, y = value, color = variable)) + geom_line()
knitr::opts_knit$set(root.dir = normalizePath(".."))
library(data.table)
library(cowplot)
library(stringr)
library(pROC)
source("../utils.R")
prediction = fread("runs/patch/patch_crc20x_sub01/checkpoint/valid_logger.txt")
colnames(prediction) = c("iteration", "tile", "label", "pred", "raw0", "raw1", "sm0", "sm1", "nlsm0", "nlsm1", "loss")
last_iteration = max(prediction$iteration)
batch = 5120
confusion = prediction[,list(tn = sum(pred==0 & label==0)/batch, tp = sum(pred==1&label==1)/batch, fn = sum(pred==0&label==1)/batch, fp = sum(pred==1&label==0)/batch), by="iteration"]
infer = fread("runs/patch/patch_crc20x_sub01/checkpoint/infer_logger.txt")
colnames(infer) = c("split", "tile", "label", "pred", "raw0", "raw1", "sm0", "sm1", "nlsm0", "nlsm1", "loss")
infer
table(infer[split == "train"][, list(label, pred)])
message("Train")
table(infer[split == "train"][, list(label, pred)])
message("Valid")
table(infer[split == "valid"][, list(label, pred)])
message("Test")
table(infer[split == "test"][, list(label, pred)])
message("Train")
table(infer[split == "train"][, list(label, pred)])
message("Valid")
table(infer[split == "val"][, list(label, pred)])
message("Test")
table(infer[split == "test"][, list(label, pred)])
knitr::opts_knit$set(root.dir = normalizePath(".."))
library(data.table)
library(cowplot)
library(stringr)
library(pROC)
source("../utils.R")
prediction = fread("runs/patch/patch_crc10x_sub04/checkpoint/infer_logger.txt")
colnames(prediction) = c("split", "tile", "label", "pred", "raw0", "raw1", "sm0", "sm1", "nlsm0", "nlsm1", "loss")
prediction[, wsi := basename(dirname(tile))]
accuracy = prediction[, list(accuracy = mean(label == pred)), by="split"]
accuracy
message("Train")
table(prediction[split == "train", list(label, pred)])
message("Valid")
table(prediction[split == "val", list(label, pred)])
message("Test")
table(prediction[split == "test", list(label, pred)])
message("Train")
table(prediction[split == "train", list(label, pred)])
message("Valid")
table(prediction[split == "val", list(label, pred)])
message("Test")
table(prediction[split == "test", list(label, pred)])
message("Train")
roc = roc(label ~ sm1, data = prediction, subset = (split == "train"))
plot(roc, print.auc = TRUE, main = "Train")
message("Train")
roc = roc(label ~ sm1, data = prediction, subset = (split == "val"))
plot(roc, print.auc = TRUE, main = "Valid")
message("Train")
roc = roc(label ~ sm1, data = prediction, subset = (split == "test"))
plot(roc, print.auc = TRUE, main="Test")
wsi_pred = prediction[, list(sm1=mean(sm1), label=unique(label)), by=c("wsi", "split")]
wsi_pred[, pred := sm1 > 0.5]
message("Train")
table(wsi_pred[split == "train", list(label, pred)])
message("Valid")
table(wsi_pred[split == "val", list(label, pred)])
message("Test")
table(wsi_pred[split == "test", list(label, pred)])
message("Train")
roc = roc(label ~ sm1, data = wsi_pred, subset = (split == "train"))
plot(roc, print.auc = TRUE, main = "Train")
message("Train")
roc = roc(label ~ sm1, data = wsi_pred, subset = (split == "val"))
plot(roc, print.auc = TRUE, main = "Valid")
message("Train")
roc = roc(label ~ sm1, data = wsi_pred, subset = (split == "test"))
plot(roc, print.auc = TRUE, main="Test")
ggplot(prediction, aes(x=sm1, fill=as.factor(label))) + geom_histogram(aes(y=..count../sum(..count..)),position="dodge") + facet_grid(split~., scale="free_y")
msi = unique(prediction[split=="val" & label == 1, wsi])
for (w in msi){
plot_msi = prediction[wsi == w]
p=ggplot(plot_msi, aes(x=sm1)) + geom_histogram(fill="red",aes(y=..count../sum(..count..)),position="dodge")+ggtitle(w)
print(p)
}
mss = unique(prediction[split=="val" & label == 0, wsi])
for (w in mss){
plot_mss = prediction[wsi == w]
p=ggplot(plot_mss, aes(x=sm1)) + geom_histogram(aes(y=..count../sum(..count..))) + ggtitle(w)
print(p)
}
library(ggplot2)
library(gggenes)
?geom_gene_label
ggplot(all, aes(xmin=start, xmax=end, y=molecule, fill=overlap, label=gene)) +
geom_gene_arrow() +
geom_gene_label() +
facet_wrap(~molecule, scales="free", ncol=1)+
scale_fill_brewer(palette="Set3")
library(ggplot2)
library(gggenes)
library(data.table)
setwd("~/svail/open_reading_frame/scripts")
pred = fread("../processed_data/glimmer/COVID19.iterated.predict", skip=1)
setnames(pred, c("gene", "start", "end", "frame", "confidence"))
pred$molecule = "pred"
pred$confidence = NULL
pred = pred[pred$frame >= 0]
known = fread("../data/COVID19.nh")
setnames(known, c("gene", "start", "end", "frame", "name"))
known$molecule = "known"
known$name = NULL
pred[, id:=paste(start, end, sep=":")]
known[, id:=paste(start, end, sep=":")]
pred[, overlap:=id %in% known$id]
known[, overlap:=id %in% pred$id]
all = rbind(pred, known)
ggplot(all, aes(xmin=start, xmax=end, y=molecule, fill=overlap, label=gene)) +
geom_gene_arrow() +
geom_gene_label() +
facet_wrap(~molecule, scales="free", ncol=1)+
scale_fill_brewer(palette="Set3")
knitr::opts_chunk$set(echo = TRUE)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("devtools")
install.packages("htmlwidgets")
install.packages("devtools")
devtools::create("mywidget")               # create package using devtools
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
knitr::opts_chunk$set(echo = TRUE)
install.packages("htmlwidgets")
install.packages("devtools")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
devtools::create("mywidget")               # create package using devtools
setwd("mywidget")                          # navigate to package dir
setwd("mywidget")                          # navigate to package dir
htmlwidgets::scaffoldWidget("mywidget")    # create widget scaffolding
getwd()
setwd("..")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = '/Users/boxiang/Documents/work/Baidu/projects/viraviz/scripts')
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = '/Users/boxiang/Documents/work/Baidu/projects/viraviz/scripts/')
getwd()
library(fread)
library(data.table)
genome_lengths = fread(in_fn)
in_fn = "../../processed_data/preprocess/filter_fasta/genome_lengths.tsv"
genome_lengths = fread(in_fn)
genome_lengths
genome_lengths
genome_lengths[1,:]
genome_lengths[1,]
genome_lengths = fread(in_fn, sep="\t")
genome_lengths
genome_lengths
genome_lengths = fread(in_fn, sep="\t", header = c("description", "type", "length"))
?fread
genome_lengths = fread(in_fn, sep="\t", col.names = c("description", "type", "length"))
genome_lengths
library(ggplot2)
ggplot(genome_lengths, aes(x=length, color=type)) + geom_density()
p = ggplot(genome_lengths, aes(x=length, color=type)) + geom_density()
print(p)
p
p = ggplot(genome_lengths, aes(x=length, y=length)) + geom_line()
p = ggplot(genome_lengths, aes(x=length, y=length)) + geom_line()
print(p)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = '/Users/boxiang/Documents/work/Baidu/projects/viraviz/scripts/')
library(data.table)
library(ggplot2)
library(knitr)
library(rmarkdown)
library(DT)
metadata = fread("../../data/aggregated/metadata/merged_in_vcf.tsv")
data_source = metadata[, list(raw_data = .N), by="Data_Source"]
data_source
seq_vs_time = metadata[, list(num=.N), by=c("Collection_Date","Data_Source")]
seq_vs_time
ggplot(seq_vs_time, aes(x=Collection_Date,y=num,color=Data_Source)) + geom_bar()
ggplot(seq_vs_time, aes(x=Collection_Date,y=num,color=Data_Source)) + geom_bar(stat="identity")
ggplot(seq_vs_time, aes(x=Collection_Date,y=num,color=Data_Source)) + geom_bar(stat="identity", position="stacked")
ggplot(seq_vs_time, aes(x=Collection_Date,y=num,color=Data_Source)) + geom_bar(stat="identity", position="stack")
ggplot(seq_vs_time, aes(x=Collection_Date,y=num,fill=Data_Source)) + geom_bar(stat="identity", position="stack")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = '/Users/boxiang/Documents/work/Baidu/projects/viraviz/scripts/')
library(data.table)
library(ggplot2)
library(knitr)
library(rmarkdown)
library(DT)
library(cowplot)
metadata
metadata
metadata$Collection_Date
date("2020-03-25")
library(lubridate)
date("2020-03-25")
year("2020-03-25")
month("2020-03-25")
sprintf(year("2020-03"))
year("2020-03")
parse_date_time("2020-03", "ym")
parse_date_time(metadata["Collection_Date"], c("y", "ym", "ymd"))
parse_date_time(metadata[,"Collection_Date"], c("y", "ym", "ymd"))
metadata[,"Collection_Date"]
metadata[,Collection_Date]
parse_date_time(metadata[,Collection_Date], c("y", "ym", "ymd"))
sprintf("%s-%s", "a", "b")
metadata$year_mon = sprintf("%s-%s",year(parsed_date), month(parsed_date))
parsed_date = parse_date_time(metadata[,Collection_Date], c("y", "ym", "ymd"))
metadata$year_mon = sprintf("%s-%s",year(parsed_date), month(parsed_date))
seq_vs_time = metadata[, list(num=.N), by=c("Collection_Date","Data_Source")]
ggplot(seq_vs_time, aes(x=Collection_Date,y=num,fill=Data_Source)) + geom_bar(stat="identity")
seq_vs_time = metadata[, list(num=.N), by=c("year_mon","Data_Source")]
ggplot(seq_vs_time, aes(x=Collection_Date,y=num,fill=Data_Source)) + geom_bar(stat="identity")
ggplot(seq_vs_time, aes(x=year_mon,y=num,fill=Data_Source)) + geom_bar(stat="identity")
ggplot(seq_vs_time, aes(x=year_mon,y=num,fill=Data_Source)) + geom_bar(stat="identity") + scale_y_log10()
ggplot(seq_vs_time, aes(x=year_mon,y=num,fill=Data_Source)) + geom_bar(stat="identity")
week("2020-02-13")
metadata
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = '/Users/boxiang/Documents/work/Baidu/projects/viraviz/scripts/')
library(data.table)
library(ggplot2)
library(knitr)
library(rmarkdown)
library(DT)
library(cowplot)
library(lubridate)
metadata$week = week(parsed_date)
metadata
metadata[week == 9]
metadata[week == 9, min(year_mont)]
metadata[week == 9, min(year_mon)]
metadata[week == 9, max(year_mon)]
metadata[week == 10, max(year_mon)]
metadata[week == 10, max(Collection_Date)]
metadata[week == 10, min(Collection_Date)]
metadata[week == 9, min(Collection_Date)]
metadata[week == 9, max(Collection_Date)]
metadata[, sprintf("%s to %s", min(Collection_Date), max(Collection_Date))by="week"]
metadata[, sprintf("%s to %s", min(Collection_Date), max(Collection_Date)),by="week"]
floor_date("2020-01-08", unit="week")
floor_date("2020-01-08 UTC", unit="week")
parsed_date
floor_date("2020-03-27 UTC", unit="week")
lubridate::floor_date("2020-03-27 UTC", unit="week")
?floor_date
lubridate::floor_date(as.Date("2020-03-27 UTC"), unit="week")
as.Date("2020-03-27 UTC")
typeof(as.Date("2020-03-27 UTC"))
typeof(parsed_date)
parsed_date
floor_date(parsed_date, unit="week")
week_start = floor_date(parsed_date, unit="week")
week_end = ceiling_date(parsed_date, unit="week")
metadata$date_range = sprintf("%s to %s", week_start, week_end)
seq_vs_time = metadata[, list(num=.N), by=c("date_range","Data_Source")]
ggplot(seq_vs_time, aes(x=date_range,y=num,fill=Data_Source)) + geom_bar(stat="identity")
ggplot(seq_vs_time, aes(x=date_range,y=num,fill=Data_Source)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=90))
week_start
week_end
head(week_start)
head(week_end)
head(parsed_date)
week_start = floor_date(parsed_date, unit="weeks")
head(week_start)
week_end = ceiling_date(parsed_date, unit="weeks")
head(week_end)
metadata$weel
metadata$week
head(metadata$week)
parsed_date = parse_date_time(metadata[,Collection_Date], c("y", "ym", "ymd"))
metadata$year_mon = sprintf("%s-%s",year(parsed_date), month(parsed_date))
metadata$week = week(parsed_date)
week_start = floor_date(parsed_date, unit="weeks")
week_end = ceiling_date(parsed_date, unit="weeks")
metadata$date_range = sprintf("%s to %s", week_start, week_end)
head(metadata$week)
head(metadata$week_start)
head(week_start)
head(metadata$week_end)
head(week_end)
library(MMWRweek)
install.packages("MMWRweek")
MMWRweek::MMWRweek(MMWRyear=2020, MMWRweek=9)
MMWRweek::MMWRweek(MMWRyear=2020, MMWRweek=9, MMWRday=1)
?MMWRweek::MMWRweek
MMWRweek::MMWRweek2Date(MMWRyear=2020, MMWRweek=9, MMWRday=1)
MMWRweek::MMWRweek2Date(MMWRyear=2020, MMWRweek=10, MMWRday=1)
MMWRweek::MMWRweek2Date(MMWRyear=2020, MMWRweek=10, MMWRday=7)
?floor_date
parsed_date = parse_date_time(metadata[,Collection_Date], c("y", "ym", "ymd"))
metadata$year_mon = sprintf("%s-%s",year(parsed_date), month(parsed_date))
metadata$week = week(parsed_date)
week_start = floor_date(parsed_date, unit="weeks")
week_end = ceiling_date(parsed_date, unit="weeks")
metadata$date_range = sprintf("%s to %s", week_start, week_end)
metadata$week_start = week_start
seq_vs_time = metadata[, list(num=.N), by=c("date_range","Data_Source")]
ggplot(seq_vs_time, aes(x=week_start,y=num,fill=Data_Source)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=90))
seq_vs_time = metadata[, list(num=.N), by=c("week_start","Data_Source")]
ggplot(seq_vs_time, aes(x=week_start,y=num,fill=Data_Source)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=90))
seq_vs_time
ggplot(seq_vs_time, aes(x=week_start,y=num,fill=Data_Source)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=0))
ggplot(seq_vs_time, aes(x=week_start,y=num,fill=Data_Source)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=0)) + ylab("Number of virus collected/sequenced")
ggplot(seq_vs_time, aes(x=week_start,y=num,fill=Data_Source)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=0)) + ylab("Number of Virus Collected/Sequenced")
ggplot(seq_vs_time, aes(x=week_start,y=num,fill=Data_Source)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=0)) + ylab("Number of Virus Collected/Sequenced") + xlab(NULL)
ggplot(seq_vs_time, aes(x=week_start,y=num,fill=Data_Source)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=0), legend.position = "bottom", legend.title = element_text(label="Source")) + ylab("Number of Virus Collected/Sequenced") + xlab(NULL)
ggplot(seq_vs_time, aes(x=week_start,y=num,fill=Data_Source)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=0), legend.position = "bottom") + ylab("Number of Virus Collected/Sequenced") + xlab(NULL) + scale_fill_discrete(name="Source")
library(sf)
install.packages("sf")
library(rnaturalearth)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(rnaturalearth)
world = ne_countries(scale="medium", returnclass="sf")
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearth)
library(sf)
install.packages("sf")
install.packages("sf")
library(classInt)
install.packages("rgdal")
install.packages("sf")
install.packages("sf")
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
world = ne_countries(scale="medium", returnclass="sf")
install.packages("rgeos")
world = ne_countries(scale="medium", returnclass="sf")
world
ggplot(data = world) +
geom_sf()
ggplot(data = world) +
geom_sf() + theme_bw()
ggplot(data = world) +
theme_bw() + geom_sf()
ggplot(data = world) +
theme_bw() + geom_sf(aes(fill=pop_est))
head(world)
world$sovereignt
world$sovereignt == "USA"
sum(world$sovereignt == "USA")
metadata
install.packages("countrycode")
head(world)
library(countrycode)
countrycode("USA", destination="country.name")
countrycode("USA", origin="country.name", destination="country.name")
world$sovereignt
head(world)
countrycode("USA", origin="country.name", destination="iso3c")
countrycode("Finland", origin="country.name", destination="iso3c")
countrycode("United Kingdom", origin="country.name", destination="iso3c")
countrycode("Anguilla", origin="country.name", destination="iso3c")
countrycode("Anguilla", origin="country.name", destination="iso3n")
countrycode("Anguilla", origin="country.name", destination="iso3c")
countrycode(world$sovereignt, origin="country.name", destination = "iso3c")
world$iso3c = countrycode(world$sovereignt, origin="country.name", destination = "iso3c")
head(world)
metadata
countrycode(metadata$Country, origin="country.name", destination = "iso3c")
is.na(countrycode(metadata$Country, origin="country.name", destination = "iso3c"))
metadata[is.na(countrycode(metadata$Country, origin="country.name", destination = "iso3c"))]
